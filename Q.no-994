class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0; 
        int timeElapsed = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    queue.offer(new int[]{i, j, 0});
                } else if (grid[i][j] == 1) {
                    freshOranges++;
                }
            }
        }
        if (freshOranges == 0) return 0;
        while (!queue.isEmpty()) {
            int[] coord = queue.poll();
            int row = coord[0];
            int col = coord[1];
            int time = coord[2];
            if (row > 0 && grid[row - 1][col] == 1) { 
                queue.offer(new int[]{row - 1, col, time + 1});
                grid[row - 1][col] = 2;
                freshOranges--;
                timeElapsed = time + 1;
            }
            if (row < m - 1 && grid[row + 1][col] == 1) {
                queue.offer(new int[]{row + 1, col, time + 1});
                grid[row + 1][col] = 2;
                freshOranges--;
                timeElapsed = time + 1;
            }
            if (col > 0 && grid[row][col - 1] == 1) {
                queue.offer(new int[]{row, col - 1, time + 1});
                grid[row][col - 1] = 2;
                freshOranges--;
                timeElapsed = time + 1;
            }
            if (col < n - 1 && grid[row][col + 1] == 1) {
                queue.offer(new int[]{row, col + 1, time + 1});
                grid[row][col + 1] = 2;
                freshOranges--;
                timeElapsed = time + 1;
            }
        }
        return freshOranges == 0 ? timeElapsed : -1;
    }
}
